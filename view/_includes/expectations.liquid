<div id="expectations"></div>
<script>
  let contribs = {}
  survey0.map(function(row) {
    let proj = row.ProjectPseudonym.trim();
    contribs[proj] = {
      m0: row["project-open-contrib"]
    };
  });

  survey6.map(function(row) {
    let proj = row.ProjectPseudonym.trim();
    contribs[proj].m6 = row["project-open-contrib"];

  });
  survey12.map(function(row) {
    let proj = row.ProjectPseudonym.trim();
    contribs[proj].m12 = row["project-open-contrib"];
  });

// stripe the data, so the chart likes it.
  let contribsStriped = {
    names: Object.keys(contribs),
    m0: [],
    m6: [],
    m12: [],
    colors: {
      bg: {
        m0: [],
        m6: [],
        m12: []
      },
      border: {
        m0: [],
        m6: [],
        m12: []
      }
    }
  };

  var colForBool = {
    "Yes": {
      border: colors.solid.blue,
      bg: colors.faded.blue
    },
    "No": {
      border: colors.solid.yellow,
      bg: colors.faded.yellow
    },
    "No answer": {
      border: colors.solid.grey,
      bg: colors.faded.grey
    }
  }

// I know it's not a real bool, but functionally it's a bool!
  const colorForBool = function(bool, bg) {
    if (! bool) {
      return colors.faded.grey; // grey for null values
    }if (bg) {
      return colForBool[bool].bg;
    } else {
      return colForBool[bool].border;
    }

  }

  Object.values(contribs).map(function(e) {
    contribsStriped.m0.push(e.m0);
    contribsStriped.m6.push(e.m6);
    contribsStriped.m12.push(e.m12);
    contribsStriped
      .colors
      .bg
      .m0
      .push(colorForBool(e.m0, true));
    contribsStriped
      .colors
      .bg
      .m6
      .push(colorForBool(e.m6, true));
    contribsStriped
      .colors
      .bg
      .m12
      .push(colorForBool(e.m12, true));
    contribsStriped
      .colors
      .border
      .m0
      .push(colorForBool(e.m0));
    contribsStriped
      .colors
      .border
      .m6
      .push(colorForBool(e.m6));
    contribsStriped
      .colors
      .border
      .m12
      .push(colorForBool(e.m12));
  });

  const generateExpChart = function(variable) {
    try {

      let fill = Array(contribsStriped.m0.length).fill(1);
      let months = [
        null,
        "Month 0",
        null,
        "Month 6",
        null,
        "Month 12"
      ];

      return new Chart(document.getElementById('chart' + variable), {
        type: 'bar',
        data: {
          labels: contribsStriped.names,
          datasets: [
            {

              data: fill,
              backgroundColor: contribsStriped.colors.bg.m0,
              borderColor: contribsStriped.colors.border.m0,
              stack: 'Stack 0'
            }, {
              data: fill,
              backgroundColor: contribsStriped.colors.bg.m6,
              borderColor: contribsStriped.colors.border.m6,
              stack: 'Stack 0'
            }, {
              data: fill,
              backgroundColor: contribsStriped.colors.bg.m12,
              borderColor: contribsStriped.colors.border.m12,
              stack: 'Stack 0'
            }
          ]
        },
        options: {
          scales: {
            x: {
              ticks: {
                callback: function(value, index, ticks) {
                  return months[index];
                }
              }
            }
          },
          indexAxis: 'y',
          plugins: {
            title: {
              text: questionText["project-open-contrib"],
              display: true
            },
            htmlLegend: {
              containerID: 'legendhola',
              boxes: colForBool
            },
            legend: {
              display: false
            }
          }
        },
        plugins: [htmlLegendPlugin]
      });
    } catch (e) {
      console.log(e);
    }
  }
  generateElem("hola", "expectations", true);
  generateExpChart("hola");
</script>